#########################################################################################################
#
# PloidEvol RevBayes script
#
# authors: Rosana Zenil-Ferguson, Will Freyman, Jordan
#
#########################################################################################################

setOption("useScaling", "true")
setOption("scalingDensity", "1")
setOption("tolerance", "1e-20") # default 1e-09

#########################
# Read in the data 
#########################


phylogeny <- readTrees("data/ploidyangiostree.nex")[1]
ploidy_data = readCharacterDataDelimited("data/ploidyvalsrevbayes.csv", 
                                         stateLabels=13, 
                                         type="NaturalNumbers", 
                                         delimiter=",", 
                                         headers=TRUE)

#########################
# PloidEvol Model
#########################

# first define the transition rates

## even to odd increase
#alpha ~ dnBeta(1, 3)
##alpha.setValue(0.141)
#
## event to odd decrease
#beta ~ dnBeta(1, 3)
##beta.setValue(6.7e-4)
#
## odd to even increase
#omega ~ dnBeta(1, 3)
##omega.setValue(2.6e-3)
#
## diploidization
#delta ~ dnUniform(0, 2)
##delta.setValue(1.091)
#
## even to even increase
#epsilon ~ dnBeta(2, 5)
##epsilon.setValue(0.288)
#
## duplication
#rho ~ dnBeta(1, 3)
##rho.setValue(0.066)

# set up hyperpriors for each transition rate
mvi = 1
for (i in 1:6) {
    num_events[i] ~ dnExponential(1/100)
    num_events[i].setValue(100)
    moves[mvi++] = mvScale(num_events[i], lambda=20, weight=3)
    moves[mvi++] = mvScale(num_events[i], lambda=2, weight=3)
    rate_pr[i] := phylogeny.treeLength() / num_events[i]
}

# even to odd increase
alpha ~ dnExponential(rate_pr[1])

# even to odd decrease
beta ~ dnExponential(rate_pr[2])

# odd to even increase
omega ~ dnExponential(rate_pr[3])

# diploidization
delta ~ dnExponential(rate_pr[4])

# even to even increase
epsilon ~ dnExponential(rate_pr[5])

# duplication
rho ~ dnExponential(rate_pr[6])

# add MCMC moves for each of the rates
moves[mvi++] = mvScale(alpha, lambda=1, weight=2) 
moves[mvi++] = mvScale(beta, lambda=1, weight=2) 
moves[mvi++] = mvScale(omega, lambda=1, weight=2) 
moves[mvi++] = mvScale(delta, lambda=1, weight=2) 
moves[mvi++] = mvScale(epsilon, lambda=1, weight=2) 
moves[mvi++] = mvScale(rho, lambda=1, weight=2) 

moves[mvi++] = mvScale(alpha, lambda=0.01, weight=2) 
moves[mvi++] = mvScale(beta, lambda=0.01, weight=2) 
moves[mvi++] = mvScale(omega, lambda=0.01, weight=2) 
moves[mvi++] = mvScale(delta, lambda=0.01, weight=2) 
moves[mvi++] = mvScale(epsilon, lambda=0.01, weight=2) 
moves[mvi++] = mvScale(rho, lambda=0.01, weight=2) 

# now the transition rate matrix


# first initialize the matrix with all zeros:
for (i in 1:13) {
    for (j in 1:13) {
        q[i][j] := 0.0
    }
}

# 
#alpha.setValue(1)
#beta.setValue(2)
#delta.setValue(3)
#epsilon.setValue(4)
#rho.setValue(5)
#omega.setValue(6)
q[5][4] := beta
q[7][6] := beta
q[9][8] := beta
q[11][10] := beta
q[13][12] := beta

q[4][5] := alpha
q[6][7] := alpha
q[8][9] := alpha
q[10][11] := alpha
q[12][13] := alpha

q[3][4] := omega
q[5][6] := omega
q[7][8] := omega
q[9][10] := omega
q[11][12] := omega

q[3][5] := rho + epsilon
q[5][9] := rho
q[7][13] := rho

q[5][7] := epsilon
q[7][9] := epsilon
q[9][11] := epsilon
q[11][13] := epsilon

q[5][3] := delta
q[7][3] := delta
q[9][3] := delta
q[11][3] := delta
q[13][3] := delta

# generate the actual matrix
Q := fnFreeK(q, rescaled=false, matrixExponentialMethod="scalingAndSquaring")

# here we assume the frequency of ploidy levels at the root of the tree are equal. 
#root_frequencies := simplex(rep(1, 13))
#root_frequencies := simplex([0,0,1,1,1,1,1,1,1,1,1,1,1])

# fix root to diploid
#root_frequencies := simplex([0,0,1,0,0,0,0,0,0,0,0,0,0])
root_frequencies ~ dnDirichlet(rep(1, 13))
moves[mvi++] = mvBetaSimplex(root_frequencies, alpha=0.5, weight=3)
moves[mvi++] = mvElementSwapSimplex(root_frequencies, weight=3)


# the mean rate prior will be the expected diversification rate
rate_mean <- abs( ln(250000/2.0) / phylogeny.rootAge() )
rate_sd <- 2.0

for (i in 1:3) {
    
    speciation[i] ~ dnLognormal(ln(rate_mean), 1)
    moves[mvi++] = mvScale(speciation[i], lambda=2.0, weight=4)
    moves[mvi++] = mvScale(speciation[i], lambda=0.5, weight=4)
    moves[mvi++] = mvScale(speciation[i], lambda=0.01, weight=4)
    
    extinction[i] ~ dnLognormal(ln(rate_mean), 1)
    moves[mvi++] = mvScale(extinction[i], lambda=2.0, weight=4)
    moves[mvi++] = mvScale(extinction[i], lambda=0.5, weight=4)
    moves[mvi++] = mvScale(extinction[i], lambda=0.01, weight=4)
    
    up_down_scale_mv[i] = mvUpDownScale(lambda=0.5, weight=8)
    up_down_scale_mv[i].addVariable( speciation[i], TRUE )
    up_down_scale_mv[i].addVariable( extinction[i], TRUE )
    moves[mvi++] = up_down_scale_mv[i]
    
    up_down_scale_mv2[i] = mvUpDownScale(lambda=2.0, weight=8)
    up_down_scale_mv2[i].addVariable( speciation[i], TRUE )
    up_down_scale_mv2[i].addVariable( extinction[i], TRUE )
    moves[mvi++] = up_down_scale_mv2[i]

}

birth[1] <- 0
birth[2] <- 0
birth[3] := speciation[1]
birth[4] := speciation[2]
birth[5] := speciation[3]
birth[6] := speciation[2]
birth[7] := speciation[3]
birth[8] := speciation[2]
birth[9] := speciation[3]
birth[10] := speciation[2]
birth[11] := speciation[3]
birth[12] := speciation[2]
birth[13] := speciation[3]

death[1] <- 0
death[2] <- 0
death[3] := extinction[1]
death[4] := extinction[2]
death[5] := extinction[3]
death[6] := extinction[2]
death[7] := extinction[3]
death[8] := extinction[2]
death[9] := extinction[3]
death[10] := extinction[2]
death[11] := extinction[3]
death[12] := extinction[2]
death[13] := extinction[3]

speciation_dip := speciation[1]
speciation_odd := speciation[2]
speciation_even := speciation[3]
extinction_dip := extinction[1]
extinction_odd := extinction[2]
extinction_even := extinction[3]

diversification_dip := speciation_dip - extinction_dip
diversification_odd := speciation_odd - extinction_odd
diversification_even := speciation_even - extinction_even

# rho is the probability of sampling species at the present
rho_p <- phylogeny.ntips()/250000

# construct a variable for the tree drawn from a SSE process
sse ~ dnCDBDP(rootAge           = phylogeny.rootAge(),
              speciationRates   = birth,
              extinctionRates   = death, 
              Q                 = Q,
              delta             = 1.0,
              pi                = root_frequencies,
              rho               = rho_p,
              condition         = "survival",
              taxa              = phylogeny.taxa())

# clamp the model with the "observed" tree and character data
sse.clamp( phylogeny )
sse.clampCharData( ploidy_data )

mymodel = model(sse)


#########################
# MCMC
#########################


# set up MCMC monitors and run
monitors[1] = mnScreen(printgen=1)
monitors[2] = mnJointConditionalAncestralState(filename="output/sse_anc_states.log", 
                                               printgen=1, 
                                               tree=phylogeny, 
                                               cdbdp=sse,
                                               type="NaturalNumbers")
monitors[3] = mnStochasticCharacterMap(cdbdp=sse, 
                                       printgen=1, 
                                       filename="output/sse_stoch_maps.log", 
                                       include_simmap=true)

monitors[4] = mnModel(filename="output/sse_model.log", printgen=1)

mymcmc = mcmc(mymodel, monitors, moves)
mymcmc.run(20000)


#########################
# Summarize the results 
#########################


# now let's summarize the sampled ancestral states
#anc_state_trace = readAncestralStateTrace("output/anc_states.log")
#ancestralStateTree(phylogeny, anc_state_trace, "output/final.tree", burnin=0.25, reconstruction="marginal")



