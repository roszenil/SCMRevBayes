#########################################################################################################
#
# PloidEvol RevBayes script
#
# authors: Rosana Zenil-Ferguson, Will Freyman, Jordan
#
#########################################################################################################

setOption("useScaling", "true")
setOption("scalingDensity", "1")
setOption("tolerance", "1e-20") # default 1e-09

#########################
# Read in the data 
#########################


phylogeny <- readTrees("data/ploidyangiostree.nex")[1]
ploidy_data = readCharacterDataDelimited("data/ploidyvalsrevbayes.csv", 
                                         stateLabels=13, 
                                         type="NaturalNumbers", 
                                         delimiter=",", 
                                         headers=TRUE)

#########################
# PloidEvol Model
#########################

# first define the transition rates

## even to odd increase
#alpha ~ dnBeta(1, 3)
##alpha.setValue(0.141)
#
## event to odd decrease
#beta ~ dnBeta(1, 3)
##beta.setValue(6.7e-4)
#
## odd to even increase
#omega ~ dnBeta(1, 3)
##omega.setValue(2.6e-3)
#
## diploidization
#delta ~ dnUniform(0, 2)
##delta.setValue(1.091)
#
## even to even increase
#epsilon ~ dnBeta(2, 5)
##epsilon.setValue(0.288)
#
## duplication
#rho ~ dnBeta(1, 3)
##rho.setValue(0.066)
num_events ~ dnExponential(1/100)
num_events.setValue(100)
mvi = 1
moves[mvi++] = mvScale(num_events, lambda=20, weight=3)
moves[mvi++] = mvScale(num_events, lambda=2, weight=3)
rate_pr := phylogeny.treeLength() / num_events

alpha ~ dnExponential(rate_pr)
beta ~ dnExponential(rate_pr)
omega ~ dnExponential(rate_pr)
delta ~ dnExponential(rate_pr)
epsilon ~ dnExponential(rate_pr)
rho ~ dnExponential(rate_pr)

# add MCMC moves for each of the rates
moves[mvi++] = mvScale(alpha, lambda=1, weight=1) 
moves[mvi++] = mvScale(beta, lambda=1, weight=1) 
moves[mvi++] = mvScale(omega, lambda=1, weight=1) 
moves[mvi++] = mvScale(delta, lambda=1, weight=1) 
moves[mvi++] = mvScale(epsilon, lambda=1, weight=1) 
moves[mvi++] = mvScale(rho, lambda=1, weight=1) 

# now the transition rate matrix


# first initialize the matrix with all zeros:
for (i in 1:13) {
    for (j in 1:13) {
        q[i][j] := 0.0
    }
}

# 
#alpha.setValue(1)
#beta.setValue(2)
#delta.setValue(3)
#epsilon.setValue(4)
#rho.setValue(5)
#omega.setValue(6)
q[5][4] := beta
q[7][6] := beta
q[9][8] := beta
q[11][10] := beta
q[13][12] := beta

q[4][5] := alpha
q[6][7] := alpha
q[8][9] := alpha
q[10][11] := alpha
q[12][13] := alpha

q[3][4] := omega
q[5][6] := omega
q[7][8] := omega
q[9][10] := omega
q[11][12] := omega

q[3][5] := rho + epsilon
q[5][9] := rho
q[7][13] := rho

q[5][7] := epsilon
q[7][9] := epsilon
q[9][11] := epsilon
q[11][13] := epsilon

q[5][3] := delta
q[7][3] := delta
q[9][3] := delta
q[11][3] := delta
q[13][3] := delta

# generate the actual matrix
Q := fnFreeK(q, rescaled=false, matrixExponentialMethod="scalingAndSquaring")

# here we assume the frequency of ploidy levels at the root of the tree are equal. 
#root_frequencies := simplex(rep(1, 13))
root_frequencies := simplex([0,0,1,1,1,1,1,1,1,1,1,1,1])

# create the CTMC and clamp observed data
ctmc ~ dnPhyloCTMC(Q=Q, tree=phylogeny, nSites=1, rootFreq=root_frequencies, type="NaturalNumbers")
ctmc.clamp(ploidy_data)

mymodel = model(phylogeny)


#########################
# MCMC
#########################


# set up MCMC monitors and run
monitors[1] = mnScreen(printgen=10)
monitors[2] = mnJointConditionalAncestralState(filename="output/anc_states.log", 
                                               printgen=10, 
                                               tree=phylogeny, 
                                               ctmc=ctmc, 
                                               type="NaturalNumbers")
monitors[3] = mnStochasticCharacterMap(ctmc=ctmc, 
                                       printgen=10, 
                                       filename="output/stoch_maps.log", 
                                       include_simmap=true)

monitors[4] = mnModel(filename="output/model.log", printgen=10)

mymcmc = mcmc(mymodel, monitors, moves)
mymcmc.run(20000)


#########################
# Summarize the results 
#########################


# now let's summarize the sampled ancestral states
#anc_state_trace = readAncestralStateTrace("output/anc_states.log")
#ancestralStateTree(phylogeny, anc_state_trace, "output/final.tree", burnin=0.25, reconstruction="marginal")



